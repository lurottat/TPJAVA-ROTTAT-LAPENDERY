plugins {
    id 'java'
    id "jacoco"
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '1.6.4'
}

apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

group = 'com.gildedrose'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}


tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs += ["-Xlint:all", "-Xlint:-serial"]
}


tasks.withType(Checkstyle) {
  reports {
    html.stylesheet resources.text.fromFile('config/checkstyle/checkstyle.xsl')
  }
}

spotbugs {
  effort = "max"
  reportLevel = "high"
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled false
    html.enabled true
    html.stylesheet resources.text.fromFile('config/spotbugs/style.xsl')
  }
}


findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


tasks.withType(Pmd){
    reports{
        xml.enabled=true
        html.enabled=true
    }
}

pmd {
  	ignoreFailures = true
    pmdTest.enabled=false
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}


wrapper {
    gradleVersion = '4.10.2'
}


